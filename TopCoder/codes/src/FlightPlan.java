import java.util.*;
public class FlightPlan
{
    int[] dir = new int[] {0,1,0,-1,0};
    long minC;
    public long fly(int R, int C, int[] H, int cup, int cdn, int clr)
    {
        minC = Long.MAX_VALUE;
        for(int h : H)
            if(h >= H[0] && h >= H[C*R-1]) {
                boolean[][] vis = new boolean[R][C];
                vis[0][0] = true;
                dfs(0,0,1L*(h-H[0])*cup+1L*(h-H[C*R-1])*cdn,
                        h, H, R,C,clr, vis);
            }
        return minC == Long.MAX_VALUE ? -1 : minC;
    }
    void dfs(int x, int y, long cost, int maxH, int[] H, int R, int C, int clr, boolean[][] vis) {
        if(x == R-1 && y == C-1) {
            minC = Math.min(minC, cost);
            return;
        }
        for(int i = 0; i < 4; i++) {
            int tx = x+dir[i], ty = y+dir[i + 1];
            if (tx < 0 || ty < 0 || tx >= R || ty >= C || vis[tx][ty] || H[tx*C+ty] > maxH) continue;
            vis[tx][ty] = true;
            dfs(tx, ty, cost+1L*clr, maxH, H, R, C, clr, vis);
        }
    }





    // TLE o(4^(50*50))
    public long fly_v0(int R, int C, int[] H, int cup, int cdn, int clr)
    {
        minC = Long.MAX_VALUE;
        dfs_v0(0,0,0,H[0],H, R,C,cup, cdn, clr, new boolean[R][C]);
        return minC == Long.MAX_VALUE ? -1 : minC;
    }
    void dfs_v0(int x, int y, long cost, int maxH, int[] H, int R, int C, int u, int d, int lr, boolean[][] vis) {
        if(x == R-1 && y == C-1) {
            int uc = 0, dc = 0;
            int dh = maxH - H[x*C+y];
            if (dh > 0) dc = d;
            else if(dh < 0) uc = u;
            minC = Math.min(minC, cost+Math.abs(dh)*uc+Math.abs(dh)*dc);
            return;
        }
        for(int i = 0; i < 4; i++) {
            int tx = x+dir[i], ty = y+dir[i + 1];
            if (tx < 0 || ty < 0 || tx >= R || ty >= C || vis[tx][ty]) continue;
            int uc = 0;
            int dh = H[tx*C + ty] - maxH;
            int curH = maxH;
            if (dh > 0) {
                uc = u;
                maxH = H[tx*C+ty];
            }
            long dc = lr+Math.abs(dh)*uc;
            vis[tx][ty] = true;
            dfs_v0(tx, ty, cost+dc, maxH, H, R, C, u, d, lr, vis);
            maxH = curH;
            vis[tx][ty] = false;
        }
    }

// BEGIN CUT HERE
    public static void main(String[] args) {
        try {
            eq(0,(new FlightPlan()).fly(49, 41, new int[] {802430, 5935, 2756, 126596, 114, 1353, 319258, 46725, 423710, 52297, 1161, 706, 15287, 911163, 30, 17, 4787, 30, 28, 59, 972121, 417626, 45, 1798, 1, 62528, 391, 488, 30843, 17, 749623, 5, 49, 227332, 32568, 3127, 27, 2450, 559142, 412, 17925, 57657, 41, 64, 23188, 293825, 168499, 166621, 1, 61, 321, 35702, 2167, 667032, 43730, 9905, 7, 726, 605, 55, 831, 2, 26, 2, 2, 394798, 2495, 480892, 188, 32206, 3726, 35, 46, 5864, 235976, 208052, 216, 1637, 23, 28, 105, 28, 7826, 45022, 20, 14, 1733, 766770, 3760, 2, 6, 7, 389, 6630, 3267, 24, 1530, 1, 2, 23193, 51229, 7993, 570593, 292, 472, 6, 10, 6565, 2, 138691, 330244, 2145, 183, 24278, 5, 764455, 6506, 33974, 750, 46557, 123895, 250976, 12, 2732, 4, 2199, 126, 23518, 60, 1327, 105, 8, 54178, 520, 709, 124, 699338, 16, 767, 857, 159155, 38366, 48088, 246295, 468409, 4478, 161, 696296, 1073, 1, 5977, 1222, 2284, 7375, 288, 127502, 230163, 17, 8, 287, 3, 1, 1, 150026, 6526, 3507, 1, 878248, 44, 9, 68058, 1653, 5, 21, 4, 9, 12451, 513, 403, 347073, 53027, 636, 986313, 237, 44, 440828, 1, 277505, 376844, 3, 767, 41963, 2153, 10396, 1283, 4724, 1, 7, 2, 1387, 124, 2, 157611, 9, 1, 138897, 7295, 38528, 767, 10116, 4, 82648, 1164, 966336, 291955, 673716, 167, 4493, 6313, 97, 714804, 3, 176, 3, 71, 2, 397775, 202548, 760185, 9372, 48371, 1257, 142864, 1024, 20, 2, 252, 950431, 150, 6, 223, 1519, 14239, 125, 9, 11135, 381170, 49, 137, 2149, 714, 24, 14, 596, 36, 15, 52, 2, 11617, 101692, 281002, 876102, 13, 284, 17453, 55, 2541, 4967, 1, 4, 189, 46015, 5111, 446217, 48, 9, 10519, 58588, 85202, 251, 4, 49494, 869745, 63, 110988, 416, 7, 19, 239, 15685, 6, 812849, 200814, 394220, 154807, 419, 475, 222, 12045, 72342, 190, 725728, 12124, 468, 814, 25499, 4043, 63143, 133, 46, 1603, 20, 30684, 122911, 134313, 24072, 17, 2421, 100521, 97, 362, 4060, 16, 376, 1234, 137, 6163, 102, 4, 27, 3750, 1, 1593, 27, 1, 83875, 701, 8266, 120, 107, 212, 35064, 1104, 4406, 26024, 24584, 22, 32, 45274, 125200, 15, 5, 3, 11181, 308579, 3, 388, 7, 10, 1, 2927, 103, 1, 1, 2439, 7, 506083, 861, 952816, 76791, 670, 1320, 1, 52307, 3561, 3, 30863, 59, 22, 143636, 122244, 405513, 18, 203, 245, 253, 42964, 60319, 3064, 375105, 482, 114, 1422, 42913, 3441, 116564, 39700, 247, 44048, 11, 4, 960, 1, 83, 421824, 23713, 82, 8044, 15644, 78, 12931, 1, 13872, 96183, 14, 489188, 33006, 5590, 5381, 1576, 1, 4029, 1, 47, 143, 26897, 112, 1, 10, 642448, 29150, 371516, 1, 11930, 232, 261892, 6591, 1422, 13, 5521, 3775, 757692, 5305, 496, 20, 683346, 46003, 118595, 3113, 1695, 9, 1202, 2, 21393, 1, 53, 109638, 221204, 29444, 918660, 1, 785, 108, 1537, 1396, 117, 25, 4922, 35, 420128, 12177, 2663, 519, 359460, 142823, 735, 263683, 276, 1, 706707, 117642, 17783, 337, 26847, 133205, 173, 147, 94, 11770, 97451, 3, 689810, 266, 3, 5144, 5, 52, 2007, 422886, 7, 522300, 134, 1, 193332, 57, 18828, 36709, 206, 22765, 122, 212454, 19994, 381724, 85349, 15, 509096, 6, 108, 28922, 16037, 4, 36, 51, 850, 6075, 11878, 65, 39, 8861, 5, 84067, 600265, 59, 119, 358018, 1021, 987, 1058, 27405, 48820, 32, 7278, 3, 50767, 2885, 641, 11538, 3, 35, 1332, 484, 995, 7, 3, 65612, 8116, 47523, 6412, 7631, 137498, 14602, 6312, 871802, 6015, 19109, 9, 325848, 2, 102862, 56, 775, 516687, 694318, 98, 577, 186621, 39012, 3, 114103, 1, 5, 11976, 360, 5, 25549, 1824, 1, 961345, 951311, 180899, 41, 825974, 114, 173, 1, 665, 86, 1, 3610, 1, 5324, 1, 123169, 3354, 71, 13877, 18, 8236, 924984, 166, 42880, 7066, 2167, 761717, 309682, 1121, 10886, 3652, 1, 3, 19998, 13402, 2, 30, 3, 11804, 2613, 86, 249645, 43, 1, 357, 39, 3565, 77, 56, 8198, 632, 196, 167, 100, 6, 736, 1707, 522619, 1, 6, 2797, 7630, 18070, 6, 3, 2, 4, 726, 471110, 11, 10, 30315, 4852, 27, 512, 46, 24582, 3898, 12, 36635, 1, 1, 55, 8185, 261165, 46838, 34891, 171983, 8, 20707, 2, 32404, 1210, 954, 1689, 28, 13405, 7146, 25, 41873, 112060, 12, 33, 3552, 2, 656829, 224, 4, 602790, 797, 216, 688024, 11, 12, 2418, 1976, 3936, 298, 2467, 651755, 249346, 1, 21, 231, 1399, 7, 62807, 259025, 10660, 304, 17289, 370, 49, 122, 760, 1, 2, 54, 110, 3864, 150635, 564, 23, 6, 376660, 11, 1, 28555, 126, 6354, 30984, 81, 512, 1037, 391271, 38572, 86842, 102, 3, 331579, 51068, 813716, 9891, 15, 20380, 63, 950459, 35530, 337198, 29, 45, 213, 3457, 3629, 257080, 1, 49718, 7951, 1, 33, 1, 39850, 3302, 4787, 368, 39, 1796, 46538, 84, 677, 5, 8302, 43950, 3, 8, 2157, 6, 1, 640519, 169555, 543530, 6743, 198923, 40115, 5201, 2154, 1496, 261751, 56633, 7, 12545, 7799, 38, 236, 470108, 8, 4190, 3, 21, 160, 92, 435, 176724, 351337, 36013, 2033, 13, 4, 1, 788, 74141, 14876, 7956, 7572, 303650, 5, 4467, 48, 1511, 18445, 60819, 67691, 12, 620337, 26, 10160, 133645, 394374, 24634, 21187, 913, 305070, 625879, 7738, 3925, 6393, 369449, 25275, 887037, 6, 1011, 11, 115, 519477, 7873, 2, 4, 4346, 1, 3, 3, 102, 625, 464094, 217, 11014, 27, 1, 45308, 910, 1503, 2, 66199, 3520, 57, 391, 5, 31988, 24571, 4, 912, 30, 5472, 23741, 8, 1, 16, 676149, 51859, 97454, 5, 51061, 2, 1339, 2, 13, 192870, 49163, 58, 4353, 2, 221300, 9192, 13, 7, 5381, 26, 1, 1, 3312, 383689, 315, 56, 445, 26094, 29, 772, 241, 2, 52, 17, 7045, 28, 137, 7013, 215, 482243, 32, 2755, 106, 3, 22, 16026, 1550, 14741, 570, 3, 1055, 285, 1, 12, 681633, 217, 11, 71, 340, 2396, 1, 17350, 530607, 1, 4586, 1902, 1218, 36, 211040, 1, 30818, 49, 313834, 24, 139, 549, 606, 11, 113987, 3, 121, 199470, 135614, 393, 13788, 86755, 2, 76400, 16151, 71, 526008, 20, 1122, 37, 590, 504, 18, 1835, 109, 65, 112184, 13, 25986, 1292, 21988, 421667, 78147, 62, 1175, 11242, 197, 246, 7, 107111, 4442, 16, 17, 1012, 38, 1690, 73, 8, 31, 5116, 16, 30, 1, 1832, 4, 970, 20, 3785, 37749, 73476, 3, 987030, 62, 427, 351, 29, 15, 426, 13, 411191, 243, 68143, 77, 725, 149, 1, 2, 2, 47322, 545, 25, 238886, 573688, 2862, 7, 164968, 1, 785, 12, 1657, 503, 4023, 78546, 4, 398, 479, 58153, 53, 2, 89076, 2524, 179572, 116, 355, 13548, 6, 92, 241570, 641, 59878, 176, 740, 108254, 1519, 268, 248, 1177, 4, 3, 49, 2, 2, 14, 31298, 3, 5, 76849, 71, 18418, 416007, 105770, 70, 243, 5, 35293, 250, 6325, 7044, 19, 73817, 928348, 435697, 1, 64742, 699128, 13537, 282807, 1060, 213, 3487, 1027, 4, 8322, 1828, 323, 460, 22, 118219, 24046, 3593, 442154, 8118, 61, 450, 3923, 36870, 53, 1, 273, 646293, 100378, 888, 112165, 60271, 21, 7995, 1, 13266, 92323, 2, 6013, 287, 440416, 8757, 167863, 2, 3, 98, 5425, 2573, 26494, 237, 6, 224160, 1, 1, 1549, 6456, 7605, 1820, 56919, 391598, 7, 220716, 1760, 453093, 4525, 6, 32514, 246, 321, 177, 23, 585289, 181258, 28325, 22, 22, 1981, 40288, 3975, 1361, 2137, 26378, 720936, 482, 6, 108, 498, 36952, 9, 235, 2, 16, 3, 915081, 293, 1, 212, 3, 7139, 220510, 3204, 387490, 7027, 6, 479, 516, 42, 2, 6058, 791, 280, 172674, 193, 393016, 39, 200091, 13, 151, 1019, 7379, 113, 393, 157729, 63863, 458768, 37, 3, 53518, 27, 19302, 62687, 597, 225, 19, 1, 447437, 188, 1, 102448, 175499, 134, 8, 5017, 7467, 2368, 50, 1, 379951, 30, 2, 10450, 17346, 15, 35, 62, 15, 32, 950, 928663, 13557, 25, 1652, 40302, 105463, 14, 841736, 16109, 597363, 459545, 8696, 23, 63, 2, 801, 17805, 5, 279, 82335, 3, 1, 289293, 25007, 222461, 79, 126, 3, 8114, 4, 586283, 29313, 341, 14, 61010, 2, 1940, 206695, 1199, 22, 64, 22, 6234, 736342, 386451, 4, 4718, 368927, 95, 4, 423, 1, 999361, 415, 601812, 3825, 1215, 1613, 2832, 30, 179153, 1, 1908, 1, 7736, 2849, 22, 93595, 1394, 4403, 52022, 7, 48, 925170, 3, 63, 5, 40, 275, 228232, 61, 214653, 37330, 11584, 2, 5474, 99, 41, 906, 497, 1, 818450, 61726, 55, 158, 1668, 167, 1021, 30, 338, 4110, 56833, 707714, 2758, 777, 442395, 20, 419, 115223, 345313, 1, 158462, 910205, 1573, 15, 17, 3, 44770, 9, 94478, 7, 47649, 1226, 3225, 1901, 72, 3998, 14, 784868, 1363, 141, 1351, 6732, 521178, 435, 1555, 235, 192, 32, 21070, 901, 79992, 3, 15220, 3946, 311, 2, 915, 76, 1131, 80, 3, 292492, 14, 10, 760718, 935027, 1684, 15764, 480, 2, 1711, 13, 394325, 7, 77, 5, 14354, 28273, 14229, 107081, 1, 214927, 307, 17043, 2638, 1, 1, 1, 470, 16364, 27, 419, 484664, 5, 16732, 647, 496421, 1, 27412, 22424, 3, 329838, 4, 4, 938, 5, 7, 4, 30051, 52607, 193500, 2827, 218, 23218, 796, 471366, 14474, 13962, 215, 1560, 21, 467, 56, 68, 4, 1, 1752, 14, 393, 109, 1623, 279, 23, 5, 2, 608050, 180443, 55334, 1, 954, 2, 347564, 238, 1720, 432713, 7, 4522, 178178, 11, 4055, 92, 14114, 2, 33, 3176, 6415, 28, 90, 84508, 6, 587146, 1, 3, 6, 52523, 602, 89, 24164, 44920, 1, 402, 11, 2956, 110, 14, 59068, 3783, 26706, 1749, 17975, 365839, 10476, 42660, 10, 9, 30, 618, 13, 9, 80259, 1233, 11, 39, 5, 458, 35, 33206, 193, 58892, 47, 952, 4910, 34, 1, 507, 852980, 435089, 1964, 467, 7903, 415637, 644280, 1, 34608, 8620, 638, 5, 4, 599, 97, 14, 1, 212130, 1198, 550811, 38, 204, 18, 8025, 51536, 17, 103570, 148, 6455, 510, 7367, 904, 4, 3217, 19728, 1114, 338, 23568, 11897, 7, 6089, 1944, 183847, 6544, 168307, 3205, 2, 3, 39491, 25, 7, 3, 166985, 15091, 1, 1807, 235087, 220998, 231, 55214, 12, 128652, 21, 201, 15, 110448, 5, 72, 54, 6, 2, 60, 7, 18, 35051, 965, 77269, 262768, 1, 3, 8, 2043, 436, 4256, 20, 1206, 1, 10060, 90815, 8, 14, 39146, 12071, 2, 256934, 4, 467, 1801, 16219, 547, 215203, 460920, 22625, 1464, 2, 48825, 606, 30, 19, 115873, 26710, 1, 498117, 9, 9465, 58, 617289, 218286, 56258, 4500, 122681, 38, 221, 121608, 14755, 1225, 566001, 339, 216, 195, 200, 14382, 3, 790426, 7, 22, 482217, 779305, 125193, 57466, 2649, 1797, 1607, 58800, 14666, 82, 9, 16246, 79811, 723357, 1, 453, 64714, 11, 2, 245127, 573160, 56969, 5150, 51, 1164, 59, 34, 736, 25, 2, 2268, 1, 2081, 18966, 64, 65, 51100, 96723, 609344, 126828, 8289, 819, 472547, 1, 124, 215, 224563, 50, 1821, 51, 25, 4, 10, 7, 782896, 6271, 29, 67425, 1, 25505, 170, 142, 568, 10, 34025, 24, 445650, 178459, 5, 3, 34025, 182810, 172, 891436, 12, 59, 8, 639, 5590, 203152, 9082, 543852, 520375, 9955, 1086, 8143, 699853, 787, 868, 44731, 10, 392, 3728, 308862, 32, 115846, 5, 3, 2, 296, 13442, 123797, 62, 2, 102217, 290, 1, 1, 1357, 369594, 2900, 308, 7, 116, 7, 23206, 3, 360266, 804, 6, 353, 209, 1, 25, 3074, 748, 12825, 112, 213120, 31425, 9, 5624, 952781, 7125, 64921, 3807, 9501, 187, 173, 57660, 8, 37, 1581, 321220, 3, 74, 55031, 462, 920, 2, 876, 510134, 1, 153, 11001, 437, 3370, 55572, 4, 2538, 274, 3835, 63, 5598, 255, 1633, 1422, 1038, 210, 99123, 129, 56, 3, 6858, 82322, 16170, 1048, 182315, 977594, 2, 322, 97040, 60596, 2561, 46399, 2, 2421, 154905, 111248, 7, 907, 152, 1, 126458, 25, 96, 787619, 153, 1007, 14538, 3689, 417410, 2, 59, 14808, 441, 9077, 7, 25, 320558, 647783, 5607, 5, 997, 276, 5, 2112, 74554, 10, 3676, 1437, 710, 17, 486561, 5704, 247, 55729, 125470, 710, 65552, 129, 6041, 13195, 52, 174, 2, 290, 2, 192, 10145, 345155, 79, 34118, 88187, 51682, 4, 184435, 328824, 10, 200193, 27, 948814, 246685, 592, 21, 2136, 239115, 8, 176107, 108126, 73807, 223344, 83573, 2, 490852, 1, 3841, 57793, 13, 86364, 8, 7, 13160, 5, 1915, 3, 69, 4, 149, 994423, 979911, 43, 106046, 6542, 17, 47603, 7, 9097, 64115, 15599, 490503, 5732, 968556, 26920, 2934, 523891, 414, 7435, 153582, 12384, 1, 3, 440, 630, 6357, 39751, 4, 52108, 136, 34913, 608, 2860, 9, 123, 728, 90168, 45, 134147, 3}, 945174, 14423, 372743), 11606206005L);
            eq(0,(new FlightPlan()).fly(1, 5, new int[] {10, 8, 6, 8, 10}, 40, 10, 20),80L);
            eq(1,(new FlightPlan()).fly(6, 1, new int[] {10, 8, 16, 18, 8, 12}, 40, 10, 20),480L);
            eq(2,(new FlightPlan()).fly(5, 5, new int[] {  100, 1000,  100,  100,  100,
                   97, 9999, 9999, 9999,  100,
                   93, 9999,    0, 9999,  100,
                   99, 9999,   83,   65,  100,
                   98,   93,   90, 9999,   95}, 1000, 1000, 1),5010L);
            eq(3,(new FlightPlan()).fly(5, 5, new int[] {  100, 1000,  100,  100,  100,
                   97, 9999, 9999, 9999,  100,
                   93, 9999,    0, 9999,  100,
                   99, 9999,   83,   65,  100,
                   98,   93,   90, 9999,   95}, 1, 1, 1000),9805L);
            eq(4,(new FlightPlan()).fly(1, 1, new int[] {47}, 123, 234, 345),0L);
        } catch( Exception exx) {
            System.err.println(exx);
            exx.printStackTrace(System.err);
        }
    }
    private static void eq( int n, int a, int b ) {
        if ( a==b )
            System.err.println("Case "+n+" passed.");
        else
            System.err.println("Case "+n+" failed: expected "+b+", received "+a+".");
    }
    private static void eq( int n, char a, char b ) {
        if ( a==b )
            System.err.println("Case "+n+" passed.");
        else
            System.err.println("Case "+n+" failed: expected '"+b+"', received '"+a+"'.");
    }
    private static void eq( int n, long a, long b ) {
        if ( a==b )
            System.err.println("Case "+n+" passed.");
        else
            System.err.println("Case "+n+" failed: expected \""+b+"L, received "+a+"L.");
    }
    private static void eq( int n, boolean a, boolean b ) {
        if ( a==b )
            System.err.println("Case "+n+" passed.");
        else
            System.err.println("Case "+n+" failed: expected "+b+", received "+a+".");
    }
    private static void eq( int n, String a, String b ) {
        if ( a != null && a.equals(b) )
            System.err.println("Case "+n+" passed.");
        else
            System.err.println("Case "+n+" failed: expected \""+b+"\", received \""+a+"\".");
    }
    private static void eq( int n, int[] a, int[] b ) {
        if ( a.length != b.length ) {
            System.err.println("Case "+n+" failed: returned "+a.length+" elements; expected "+b.length+" elements.");
            return;
        }
        for ( int i= 0; i < a.length; i++)
            if ( a[i] != b[i] ) {
                System.err.println("Case "+n+" failed. Expected and returned array differ in position "+i);
                print( b );
                print( a );
                return;
            }
        System.err.println("Case "+n+" passed.");
    }
    private static void eq( int n, long[] a, long[] b ) {
        if ( a.length != b.length ) {
            System.err.println("Case "+n+" failed: returned "+a.length+" elements; expected "+b.length+" elements.");
            return;
        }
        for ( int i= 0; i < a.length; i++ )
            if ( a[i] != b[i] ) {
                System.err.println("Case "+n+" failed. Expected and returned array differ in position "+i);
                print( b );
                print( a );
                return;
            }
        System.err.println("Case "+n+" passed.");
    }
    private static void eq( int n, String[] a, String[] b ) {
        if ( a.length != b.length) {
            System.err.println("Case "+n+" failed: returned "+a.length+" elements; expected "+b.length+" elements.");
            return;
        }
        for ( int i= 0; i < a.length; i++ )
            if( !a[i].equals( b[i])) {
                System.err.println("Case "+n+" failed. Expected and returned array differ in position "+i);
                print( b );
                print( a );
                return;
            }
        System.err.println("Case "+n+" passed.");
    }
    private static void print( int a ) {
        System.err.print(a+" ");
    }
    private static void print( long a ) {
        System.err.print(a+"L ");
    }
    private static void print( String s ) {
        System.err.print("\""+s+"\" ");
    }
    private static void print( int[] rs ) {
        if ( rs == null) return;
        System.err.print('{');
        for ( int i= 0; i < rs.length; i++ ) {
            System.err.print(rs[i]);
            if ( i != rs.length-1 )
                System.err.print(", ");
        }
        System.err.println('}');
    }
    private static void print( long[] rs) {
        if ( rs == null ) return;
        System.err.print('{');
        for ( int i= 0; i < rs.length; i++ ) {
            System.err.print(rs[i]);
            if ( i != rs.length-1 )
                System.err.print(", ");
        }
        System.err.println('}');
    }
    private static void print( String[] rs ) {
        if ( rs == null ) return;
        System.err.print('{');
        for ( int i= 0; i < rs.length; i++ ) {
            System.err.print( "\""+rs[i]+"\"" );
            if( i != rs.length-1)
                System.err.print(", ");
        }
        System.err.println('}');
    }
    private static void nl() {
        System.err.println();
    }
// END CUT HERE
}
